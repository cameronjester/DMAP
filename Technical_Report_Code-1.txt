\documentclass[a4paper, 12pt]{article}
% Packages
\usepackage{graphicx}
\usepackage{float}
\usepackage{amsmath}
\usepackage{amssymb}
\usepackage{geometry}
\usepackage{hyperref}
\usepackage{fancyhdr}
\usepackage{listings}
\usepackage{color}
\usepackage{enumitem}
\usepackage{booktabs}
% Page layout
\geometry{margin=1in}
% Header and Footer
\pagestyle{fancy}
\fancyhf{}
\fancyhead[L]{Technical Report}
\fancyhead[R]{Data Science Project}
\fancyfoot[C]{\thepage}
% Colors for code
\definecolor{codegreen}{rgb}{0,0.6,0}
\definecolor{codegray}{rgb}{0.5,0.5,0.5}
\definecolor{codepurple}{rgb}{0.58,0,0.82}
\definecolor{backcolour}{rgb}{0.95,0.95,0.92}
\lstdefinestyle{mystyle}{
    backgroundcolor=\color{backcolour},   
    commentstyle=\color{codegreen},
    keywordstyle=\color{magenta},
    numberstyle=\tiny\color{codegray},
    stringstyle=\color{codepurple},
    basicstyle=\ttfamily\footnotesize,
    breakatwhitespace=false,         
    breaklines=true,                 
    captionpos=b,                    
    keepspaces=true,                 
    numbers=left,                    
    numbersep=5pt,                  
    showspaces=false,                
    showstringspaces=false,
    showtabs=false,                  
    tabsize=2
}
\lstset{style=mystyle}
% Title page
\title{Technical Report: Final Project DS 5110: Introduction to Data Management and Processing
}
\author{Team Members:\\ Cameron Jester & Matt Ferri
       Khoury College of Computer Sciences\\
        Data Science Program\\
        \texttt{jester.c@northeastern.edu,  ferri.m@northeastern.edu}}
\date{\today}
% Begin document
\begin{document}
\maketitle

\tableofcontents
\newpage
% Sections
\section{Introduction}
\label{sec:introduction}
Provide a brief introduction to the project, including the background, objectives, and scope.

This project aims to create a smart solution for tracking, monitoring, and visualizing bar lines in major cities, including Boston, which are known for being vibrant hubs of bars and restuarants. Given the vast amount of choices available, it can be difficult to pick the establishment with the shortest wait time to gain entry without being phiscially present. The problem at hand is how to provide users with reliable line estimates so they can make informed decisions when selecting where to go. 

While programs such as Google provide a rough idea of wait times for certain establishments, our project aims to utilizes user-input to estimate wait times for bars and restaurants in the Boston area. Utilizing user-provided data will ensure a high accuracy and also provide users with the feeling like they are contributing to the positive experience of fellow peers. 

This technology would not only be beneficial for users, but bar and restaurant owners as well as it allows for accurate forecasting of attendance to their establishments. Forecasting will help owners determine which dates and times are best for promotions, optimize staffing, and project profits with confidence. Our smart solution aims to enhance the efficiency of bars and increase consumer satisfaction when going out. 



\section{Literature Review}
\label{sec:literature-review}
Summarize the existing research relevant to the project. Discuss the methodologies, findings, and gaps in the literature.

As mentioned, Google has a wait-time feature that is present on many places of business. These wait times are made by aggregating data from users who have opted to share their phone locations with Google. Additionally, data is not made available in a central location, meaning users would need to conduct several Google searches to compile a list of bars and their associated wait times. This methodology differs from the project at hand as the final project would aggregated data directly reported from users as opposed to taking geolocation tracking from their phones. Furthermore, this project would be exclusivly applied to bars in Boston so users woud have a central location for all of the information needed to make a decision. 

A similar app called TablesReady is avaialble online for queue management, but is primarly used for restaurant owners as opposed to being focused on those who are actually attending bars.  

\section{Methodology}
\label{sec:methodology}
Describe the methods and techniques used in the project. Include details about data collection, preprocessing, and analysis.



Code was then written which aggregates bar guest estimates in 10-minute intervals for each bar, starting with a minimum timestamp for each group of bar data. Using a function that adds 10-minute increments to time values, it iterates through grouped bar data by bar id, calculates the mean guest estimate within each interval, and adjusts for a constant flow rate of bar traffic. If the difference between the mean guest estimate and the flow rate is negative, it sets the value to zero to avoid negative line lengths. The aggregated data for each bar is stored in a dictionary, capturing the start of each interval, the mean guest estimate, flow rate, and calculated line length to be used for data visualizations. 

\subsection{Data Collection}

Given the lack of public data avaiable for this kind of smart solution, it was decided build a dataset from scratch. Careful considertion was used to determine how data would be simualed and which featues would be criticial to the scope of the project. Using Python coded to simulate data, the process begam by creating a list of 500 fake names and 10 Boston-area bars, along with randomly generated demographic data such as age (21-60 years old), gender (male, female, N/A) , and zip code (6 zipe-codes in and around the South Boston area) for each individual simulated user. User information was then stored in a dictionary, which is then written to a CSV file, capturing user ID, age, gender, and zip code. A similar process is applied to bars, where each bar is assigned a unique ID, flow rate (a constant which reflects how many patrons exit a bar in a 10 minute period), and a specific zip code, saved into a dictionary and then saved to a csv. Following this, rows of data were created to simulate user visits to bars with timestamps, the flow rate of each bar, and user estimates for wait times. The data is stored and sorted in reverse chronological order, before being saved in another CSV file which acts as the master file. This structure supports the methodogies used for storing data in SQL databases as well as accessing data for visualizations. 

\subsection{Data Preprocessing}

Given the nature of simulating data, little pre-processing was needed to ensure the data was ready to be used for analysis. For clarity, the gender of users was changed from 'male', 'female', and 'NA' to 0,1,2 for computational efficiency. 



\subsection{Analysis Techniques}

HERE IS WHERE WILL NEED TO TALK ABOUT SETTING UP THE TABLES AND THAT WHOLE PROCESS 


\section{Results}
\label{sec:results}
Present the results of the analysis. Use tables, figures, and charts to support the findings.
\section{Discussion}
\label{sec:discussion}
Interpret the results and discuss their implications. Compare the findings with the literature review and explain any discrepancies.

Enabling patrons to have a real-time queing app allows for a more streamlined decision process when selecting a bar to go to. 

For bar owners, such metrics will provide crucial insights into the trends of their business including wait times, and demographics of customers such as age, gender, and where they are coming from through zip code. From a business perspective, this app will increase profits by analysizing trends and forecasting profitable sales tactics. 

Overall, this app may be used and adapted to fit a wider-audience of businesses outside of the food and beverage space. Real-time queing technology generated from users may be integrated into daily activities from grocery stores, car dealerships, postal offices, and beyond to efficiently educate users on how and where to spend their time. 



\section{Conclusion}
\label{sec:conclusion}
Summarize the key findings of the project. Discuss the limitations and suggest areas for future research.

The biggest limitation faced during this project was the short schedule given to complete all aspects of this project. Having to create a mock-up of the back-end and front-end of this project required a thorough planning period that took a bit longer to accomplish than originally accounted for. An additional month or so would be needed to bring this application to the next stage of development. 


Given the complexity and importance of this kind of project, there are areas of improvement for future work. Future work would include adding a bouncer estimate, which would further improve the accuracy of line estimations from users. Similarly, this project would be created into a phone app to make it as easy as possible for bar-goers to see estimated wait times.  

\section{References}

https://support.google.com/business/answer/6263531?hl=en


\label{sec:references}
\bibliographystyle{plain}
\bibliography{references}
% Appendices
\appendix
\section{Appendix A: Code}
\label{sec:appendix-a}
Include any relevant code used in the project. For example:
\begin{lstlisting}[language=Python, caption=Code to create csv files for users and bars from fake name lists]
people = {}

zip_codes = ['02115', '03126', '02129', '02103', '02228', '02127']
genders = ['0', '1', '2'] #male, #female, #na


i = 0
for name in fake_names:
    i = i + 1
    gender = random.choices(genders, weights=[48, 48, 4])[0]
    zip = random.choice(zip_codes)
    people[name] = { "user_id": i ,"age": random.randint(21, 60), "zip_code": zip, "gender": gender}
print(people)

fieldnames = ['Name', 'User ID', 'Age', 'Gender', 'Zip Code']
with open('consumer_data.csv', 'w', newline='') as csvfile:
    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
    writer.writeheader()
    for row,data in people.items():
        name, age, gender, zip_code = row, data['age'], data['gender'], data['zip_code']
        writer.writerow({
            'Name':name,
            "User ID": data['user_id'],
            'Age': data['age'],
            'Gender': data['gender'],
            'Zip Code': data['zip_code'],
        })



bars = {}

for name in fake_boston_bars:
    i = i + 1
    bars[name] = { "bar_id": i, "flow_rate": random.randint(5,40) , "bar_zipcode" :'02127'}
print(bars)

bar_fieldnames = ['Name', 'Bar ID', 'Flow Rate', 'Zip Code']
with open('bar_data.csv', 'w', newline='') as csvfile:
    writer = csv.DictWriter(csvfile, fieldnames=bar_fieldnames)
    writer.writeheader()
    for row,data in bars.items():
        name, bar_id, flow_rate, zip_code = row, data['bar_id'], data['flow_rate'], data['bar_zipcode']
        writer.writerow({
            'Name':name,
            'Bar ID': data['bar_id'],
            'Flow Rate': data['flow_rate'],
            'Zip Code': data['bar_zipcode'],
        })
\end{lstlisting}

\begin{lstlisting}[language=Python, caption=Code to aggregate reviews on 10 minute intervals]


def tenMinAgg(time):
  new_time = time + pd.Timedelta(minutes = 10)
  new_time_pd = pd.to_datetime(new_time)
  return new_time_pd



bar_groups = df.groupby('bar_id')

individ_bar_agg = {}



for bar_id, bar_group in bar_groups:
  first_time = bar_group['timestamp'].min()
  guest_estimate_agg = []
  constant_flow_rate = bar_group['flow_rate'].iloc[0]

  for i in range(len(bar_group['timestamp'])):
    first_time_dt = pd.to_datetime(first_time)
    last_time_dt = tenMinAgg(first_time_dt)

    agg_df = bar_group[(bar_group['timestamp']>=first_time_dt) & (bar_group['timestamp']< last_time_dt)]
    guest_estimate_agg_calc  = agg_df['guest_estimate'].mean()
    estimate_minus_fr = guest_estimate_agg_calc - constant_flow_rate
    if estimate_minus_fr < 0: #doing this so we don't have negative people in line.
        estimate_minus_fr = 0
    else:
          estimate_minus_fr = estimate_minus_fr
    guest_estimate_agg.append({'interval_start': first_time_dt, 'mean_guest_estimate_10min': guest_estimate_agg_calc, 'flow_rate': constant_flow_rate, 'line_length': estimate_minus_fr})
    first_time = last_time_dt

  individ_bar_agg[bar_id] = guest_estimate_agg
\end{lstlisting}

\section{Appendix B: Additional Figures}
\label{sec:appendix-b}
Include any additional figures or tables that support the analysis.

\begin{figure}
    \centering
    \includegraphics[width=0.5\linewidth]{Unknown-6.png}
    \caption{Gender Distribution Across Days of the Week}
    \label{fig:enter-label}
\end{figure}



\end{document}
